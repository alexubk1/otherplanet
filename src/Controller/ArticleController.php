<?php
namespace App\Controller;
use App\Entity\Article;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;

class ArticleController extends Controller {

    /**
     * @Route("/", name="homepage")
     * @Method({"GET"})
     */
    public function index() {
        $articles= $this->getDoctrine()->getRepository(Article::class)->findAll();

        return $this->render('articles/index.html.twig', array('articles' => $articles));
    }

    /**
     * @Route("/article/new", name="new_article")
     * Method({"GET", "POST"})
     */
    public function new(Request $request) {
        $article = new Article();
        $form = $this->createForm('App\Form\ArticleType', $article);
        $form->handleRequest($request);
        if($form->isSubmitted() && $form->isValid()) {

            if ($file = $form->get('picture')->getData()) {
                $fileName = $this->_generateUniqueFileName()
                    . '.' . $file->guessExtension();
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
                $article->setPicture($fileName);
            }

            $article = $form->getData();
            $em = $this->getDoctrine()->getManager();
            $em->persist($article);
            $em->flush();
            return $this->redirectToRoute('homepage');
        }
        return $this->render('articles/new.html.twig', array(
            'form' => $form->createView()
        ));
    }
    /**
     * @Route("/article/edit/{id}", name="edit_article")
     * Method({"GET", "POST"})
     */
    public function edit(Request $request, Article $article) {
        $article = $this->getDoctrine()->getRepository(Article::class)->find($article);
        $file = $article->getPicture();
        $edit_form = $this->createForm('App\Form\ArticleType', $article);
        $edit_form->handleRequest($request);

        if($edit_form->isSubmitted() && $edit_form->isValid()) {

            if ($article->getPicture()){
                $file = $article->getPicture();

            //To save your actually image if she's not edit
            $fileName = $this->_generateUniqueFileName()
                .'.'.$file->guessExtension();
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );
            $article->setPicture($fileName);
            }
            else {
                $article->setPicture($file);
            }
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->flush();
            return $this->redirectToRoute('homepage');
        }
        return $this->render('articles/edit.html.twig', array(
            'edit_form' => $edit_form->createView()
        ));
    }
    /**
     * @Route("/article/{id}", name="article_show")
     */
    public function show($id) {
        $article = $this->getDoctrine()->getRepository(Article::class)->find($id);
        return $this->render('articles/show.html.twig', array('article' => $article));
    }
    /**
     * @Route("/article/delete/{id}")
     * @Method({"DELETE"})
     */
    public function delete(Request $request, $id) {
        $article = $this->getDoctrine()->getRepository(Article::class)->find($id);
        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($article);
        $entityManager->flush();
        $response = new Response();
        $response->send();
    }

    /**
     * UniqueFileName Picture
     *
     * @return string
     */
    private function _generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}